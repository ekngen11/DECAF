package ide;

import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.KeyStroke;

import parser.Program;
import tokenizer.Tokenizer;

//Graphical interface for editing and running decaf programs.
public class DecafIDE {

	private JTextArea editor,console;
	private JButton run,stop;
	private JTextField search,line;
	private JMenuItem save,open;
	private JMenu menu;
	private JMenuBar menus;
	private JPanel panel,controls;
	private JFrame frame;

	//Set up the GUI
	public DecafIDE(){

		editor= new JTextArea(20,60);
		editor.setFont(new Font(Font.MONOSPACED,Font.PLAIN,12));
		editor.setMargin(new Insets(4,4,4,4));

		console=new JTextArea(5,60);
		console.setFont(new Font(Font.MONOSPACED,Font.PLAIN,12));
		console.setMargin(new Insets(4,4,4,4));
		console.setEditable(false);

		run= new JButton("Run");
		
		run.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e) {
				String code= editor.getText();
				Scanner scanner= new Scanner(code);
				Tokenizer tokenizer= new Tokenizer(scanner);
				Program program= new Program(tokenizer);
				program.run();
			}
		});

		stop=new JButton("Stop");

		search= new JTextField("Search...");
		search.setFont(new Font(Font.MONOSPACED,Font.ITALIC,12));
		search.addFocusListener(new FocusListener(){


			public void focusGained(FocusEvent e) {
				search.setText("");

			}


			public void focusLost(FocusEvent e) {
				search.setText("Search...");

			}

		});

		search.addActionListener(new ActionListener(){


			public void actionPerformed(ActionEvent arg0) {
				String code=editor.getText();
				String text=search.getText();
				if(!text.isEmpty()){
					int index=code.indexOf(text);
					if(index>-1){
						editor.setCaretPosition(index);
						editor.requestFocus();
					}
				}

			}

		});

		line=new JTextField("Go to line...");
		line.setFont(new Font(Font.MONOSPACED,Font.ITALIC,12));
		line.addFocusListener(new FocusListener(){


			public void focusGained(FocusEvent e) {
				line.setText("");

			}


			public void focusLost(FocusEvent e) {
				line.setText("Go to line...");

			}

		});

		line.addActionListener(new ActionListener(){


			public void actionPerformed(ActionEvent arg0) {
				String text=line.getText();
				try{
					int lineNumber=Integer.parseInt(text);
					int index=editor.getLineStartOffset(lineNumber);
					editor.setCaretPosition(index);
					editor.requestFocus();
				}catch(Exception ex){
					return;
				}
				

			}

		});

		save= new JMenuItem("Save");
		save.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,ActionEvent.CTRL_MASK));
		save.addActionListener(new ActionListener(){
	
			public void actionPerformed(ActionEvent arg0) {
				
				JFileChooser fileChooser= new JFileChooser();
				int choice= fileChooser.showSaveDialog(frame);
				if (choice==JFileChooser.APPROVE_OPTION){
					File file= fileChooser.getSelectedFile();
					try {
						PrintWriter writer= new PrintWriter(file);
						writer.print(editor.getText());
						writer.close();
					} catch (FileNotFoundException e) {
						JOptionPane.showMessageDialog(frame, "Could not save!");
					}
				}
				
			}
		});
		open= new JMenuItem();
		open.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,ActionEvent.CTRL_MASK));
		
		open.addActionListener(new ActionListener(){
			
			public void actionPerformed(ActionEvent arg0) {
				
				JFileChooser fileChooser= new JFileChooser();
				int choice= fileChooser.showOpenDialog(frame);
				if (choice==JFileChooser.APPROVE_OPTION){
					File file= fileChooser.getSelectedFile();
					try {
						Scanner scanner= new Scanner(file);
						editor.setText("");
						while(scanner.hasNextLine()){
							editor.append(scanner.nextLine()+"\n");
						}
					} catch (FileNotFoundException e) {
						JOptionPane.showMessageDialog(frame, "Could not save!");
					}
				}
				
			}
		});
		menu= new JMenu("File");
		menu.add("save");
		menu.add("open");

		menus= new JMenuBar();
		menus.add(menu);

		controls= new JPanel();
		controls.setLayout(new GridLayout(1,4));
		controls.add(search);
		controls.add(run);
		controls.add(stop);
		controls.add(line);

		panel= new JPanel();

		panel.setLayout(new BoxLayout(panel,BoxLayout.PAGE_AXIS));
		panel.add(new JScrollPane(editor));
		panel.add(controls);
		panel.add(new JScrollPane(console));

		frame= new JFrame("Decaf IDE");
		frame.setJMenuBar(menus);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().add(panel);
		frame.pack();frame.setVisible(true);


	}

	public static void main(String[] args) {

		new DecafIDE();
	}

}
